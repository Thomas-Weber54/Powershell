#============================================================================================================#
#============================================================================================================#

########################################################################
# Fonction récupérant la date du premier samedi suivant l'exécution de ce script et l'enregistre dans la variable $DateSamediSuivant.
########################################################################

$aujourdhui = Get-Date
$jourSuivant = $aujourdhui.AddDays(1)

while($jourSuivant.DayOfWeek -ne 'Saturday')
{
    $jourSuivant = $jourSuivant.AddDays(1)
}

$dateSamediSuivant = $jourSuivant.ToString("dd/MM/yyyy")

#============================================================================================================#
#============================================================================================================#

########################################################################
#Saisie manuelle de l'adresse mail destinatrice + liste de serveurs dans une POP-UP
########################################################################

########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.9.0
# Generated On: 07/07/2023 15:43
# Generated By: tweber
########################################################################

#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
#endregion

#region Generated Form Objects
$Communication_Clients_MAJ = New-Object System.Windows.Forms.Form
$Picture_Serveur = New-Object System.Windows.Forms.PictureBox
$pictureBox1 = New-Object System.Windows.Forms.PictureBox
$Serveurs_Box = New-Object System.Windows.Forms.TextBox
$Mail_Box = New-Object System.Windows.Forms.TextBox
$Texte_Mail = New-Object System.Windows.Forms.Label
$Fin_de_saisie = New-Object System.Windows.Forms.Button
$Texte_Serveurs = New-Object System.Windows.Forms.Label
$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

$Fin_de_saisie_OnClick= 
{
    $Communication_Clients_MAJ.Close()

}

$OnLoadForm_StateCorrection=
{#Correct the initial state of the form to prevent the .Net maximized form issue
	$Communication_Clients_MAJ.WindowState = $InitialFormWindowState
}

#----------------------------------------------
#region Generated Form Code

#Image PNG convertis en BASE64 pour éviter les erreurs de chemins d'accès pour chaques utilisateurs voulant utiliser ce script
$base64Image = @"
#Code BASE 64 de l'image
"@

$base64Image = $base64Image -replace '\r|\n'  # Supprime les retours à la ligne de la chaîne Base64

$bytes = [System.Convert]::FromBase64String($base64Image)
$stream = New-Object System.IO.MemoryStream
$stream.Write($bytes, 0, $bytes.Length)
$image = [System.Drawing.Image]::FromStream($stream)

$Communication_Clients_MAJ.BackgroundImage = $image

$Communication_Clients_MAJ.BackColor = [System.Drawing.Color]::FromArgb(255,180,180,180)
$Communication_Clients_MAJ.BackgroundImageLayout = 0
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 692
$System_Drawing_Size.Width = 1214
$Communication_Clients_MAJ.ClientSize = $System_Drawing_Size
$Communication_Clients_MAJ.DataBindings.DefaultDataSourceUpdateMode = 0
$Communication_Clients_MAJ.Font = New-Object System.Drawing.Font("Times New Roman",15.75,1,3,0)
$Communication_Clients_MAJ.ForeColor = [System.Drawing.Color]::FromArgb(0,255,255,255)
$Communication_Clients_MAJ.FormBorderStyle = 6
$Communication_Clients_MAJ.Name = "Communication_Clients_MAJ"
$Communication_Clients_MAJ.Text = "Communication Clients - MAJ"

$Picture_Serveur.BackColor = [System.Drawing.Color]::FromArgb(0,255,255,255)

$Picture_Serveur.BackgroundImageLayout = 0
$Picture_Serveur.DataBindings.DefaultDataSourceUpdateMode = 0

$base64Image2 = @"
#Code BASE 64 de l'image
"@

$base64Image2 = $base64Image2 -replace '\r|\n'  # Supprime les retours à la ligne de la chaîne Base64

$bytes2 = [System.Convert]::FromBase64String($base64Image2)
$stream2 = New-Object System.IO.MemoryStream
$stream2.Write($bytes2, 0, $bytes2.Length)
$image2 = [System.Drawing.Image]::FromStream($stream2)


$Picture_Serveur.Image = $image2

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 557
$System_Drawing_Point.Y = 124
$Picture_Serveur.Location = $System_Drawing_Point
$Picture_Serveur.Name = "Picture_Serveur"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 37
$System_Drawing_Size.Width = 46
$Picture_Serveur.Size = $System_Drawing_Size
$Picture_Serveur.TabIndex = 9
$Picture_Serveur.TabStop = $False

$Communication_Clients_MAJ.Controls.Add($Picture_Serveur)


$pictureBox1.DataBindings.DefaultDataSourceUpdateMode = 0

$base64picture = @"
#Code BASE 64 de l'image
"@

$base64picture = $base64picture -replace '\r|\n'  # Supprime les retours à la ligne de la chaîne Base64

$bytespicture = [System.Convert]::FromBase64String($base64picture)
$streampicture = New-Object System.IO.MemoryStream
$streampicture.Write($bytespicture, 0, $bytespicture.Length)
$imagepicture = [System.Drawing.Image]::FromStream($streampicture)


$pictureBox1.Image = $imagepicture

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 106
$System_Drawing_Point.Y = 127
$pictureBox1.Location = $System_Drawing_Point
$pictureBox1.Name = "pictureBox1"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 34
$System_Drawing_Size.Width = 46
$pictureBox1.Size = $System_Drawing_Size
$pictureBox1.TabIndex = 8
$pictureBox1.TabStop = $False

$Communication_Clients_MAJ.Controls.Add($pictureBox1)

$Serveurs_Box.AcceptsReturn = $True
$Serveurs_Box.AcceptsTab = $True
$Serveurs_Box.AccessibleRole = 28
$Serveurs_Box.BackColor = [System.Drawing.Color]::FromArgb(255,255,224,192)
$Serveurs_Box.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 539
$System_Drawing_Point.Y = 167
$Serveurs_Box.Location = $System_Drawing_Point
$Serveurs_Box.Multiline = $True
$Serveurs_Box.Name = "Serveurs_Box"
$Serveurs_Box.ScrollBars = 2
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 419
$System_Drawing_Size.Width = 321
$Serveurs_Box.Size = $System_Drawing_Size
$Serveurs_Box.TabIndex = 7
$Serveurs_Box.TextAlign = 2

$Communication_Clients_MAJ.Controls.Add($Serveurs_Box)

$Mail_Box.AcceptsReturn = $True
$Mail_Box.AccessibleRole = 28
$Mail_Box.BackColor = [System.Drawing.Color]::FromArgb(255,255,224,192)
$Mail_Box.DataBindings.DefaultDataSourceUpdateMode = 0
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 12
$System_Drawing_Point.Y = 167
$Mail_Box.Location = $System_Drawing_Point
$Mail_Box.Multiline = $True
$Mail_Box.Name = "Mail_Box"
$Mail_Box.ScrollBars = 2
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 126
$System_Drawing_Size.Width = 473
$Mail_Box.Size = $System_Drawing_Size
$Mail_Box.TabIndex = 6

$Communication_Clients_MAJ.Controls.Add($Mail_Box)

$Texte_Mail.BackColor = [System.Drawing.Color]::FromArgb(0,255,255,255)
$Texte_Mail.DataBindings.DefaultDataSourceUpdateMode = 0
$Texte_Mail.Font = New-Object System.Drawing.Font("Times New Roman",18,5,3,0)
$Texte_Mail.ForeColor = [System.Drawing.Color]::FromArgb(255,255,255,255)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 159
$System_Drawing_Point.Y = 129
$Texte_Mail.Location = $System_Drawing_Point
$Texte_Mail.Name = "Texte_Mail"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 35
$System_Drawing_Size.Width = 246
$Texte_Mail.Size = $System_Drawing_Size
$Texte_Mail.TabIndex = 5
$Texte_Mail.Text = "Mails Destinataires"
$Texte_Mail.add_Click($handler_Texte_Mail_Click)

$Communication_Clients_MAJ.Controls.Add($Texte_Mail)

$Fin_de_saisie.BackColor = [System.Drawing.Color]::FromArgb(0,255,255,255)

$Fin_de_saisie.BackgroundImageLayout = 0
$Fin_de_saisie.Cursor = [System.Windows.Forms.Cursors]::Hand
$Fin_de_saisie.DataBindings.DefaultDataSourceUpdateMode = 0
$Fin_de_saisie.FlatStyle = 0
$Fin_de_saisie.ForeColor = [System.Drawing.Color]::FromArgb(0,255,255,255)

$base64picturevalider = @"
#Code BASE 64 de l'image
"@

$base64picturevalider = $base64picturevalider -replace '\r|\n'  # Supprime les retours à la ligne de la chaîne Base64

$bytespicurevalider = [System.Convert]::FromBase64String($base64picturevalider)
$streampicturevalider = New-Object System.IO.MemoryStream
$streampicturevalider.Write($bytespicurevalider, 0, $bytespicurevalider.Length)
$imagepicturevalider = [System.Drawing.Image]::FromStream($streampicturevalider)


$Fin_de_saisie.Image = $imagepicturevalider
$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 1035
$System_Drawing_Point.Y = 605
$Fin_de_saisie.Location = $System_Drawing_Point
$Fin_de_saisie.Name = "Fin_de_saisie"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 51
$System_Drawing_Size.Width = 130
$Fin_de_saisie.Size = $System_Drawing_Size
$Fin_de_saisie.TabIndex = 4
$Fin_de_saisie.UseVisualStyleBackColor = $False
$Fin_de_saisie.add_Click($Fin_de_saisie_OnClick)

$Communication_Clients_MAJ.Controls.Add($Fin_de_saisie)

$Texte_Serveurs.BackColor = [System.Drawing.Color]::FromArgb(0,255,255,255)
$Texte_Serveurs.DataBindings.DefaultDataSourceUpdateMode = 0
$Texte_Serveurs.Font = New-Object System.Drawing.Font("Times New Roman",20.25,5,3,1)
$Texte_Serveurs.ForeColor = [System.Drawing.Color]::FromArgb(255,244,247,252)

$System_Drawing_Point = New-Object System.Drawing.Point
$System_Drawing_Point.X = 609
$System_Drawing_Point.Y = 124
$Texte_Serveurs.Location = $System_Drawing_Point
$Texte_Serveurs.Name = "Texte_Serveurs"
$System_Drawing_Size = New-Object System.Drawing.Size
$System_Drawing_Size.Height = 37
$System_Drawing_Size.Width = 223
$Texte_Serveurs.Size = $System_Drawing_Size
$Texte_Serveurs.TabIndex = 3
$Texte_Serveurs.Text = "Liste des serveurs"
$Texte_Serveurs.add_Click($handler_Texte_Serveurs_Click)

$Communication_Clients_MAJ.Controls.Add($Texte_Serveurs)

#endregion Generated Form Code

#Save the initial state of the form
$InitialFormWindowState = $Communication_Clients_MAJ.WindowState
#Init the OnLoad event to correct the initial state of the form
$Communication_Clients_MAJ.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$Communication_Clients_MAJ.ShowDialog()| Out-Null

#variable à récupérer pour la communication client.

$destinataire = $Mail_Box.Text -split "`r`n"
$informations = $Serveurs_Box.Text -split "`r`n"

#============================================================================================================#
#============================================================================================================#

########################################################################
# Gestionnaire d'erreur
# Création et implémentation d'un fichier de log - Gestion des Erreurs.
########################################################################

# Importer le module Windows Forms
# Le module .NET Framework sur le système utilisant ce script doit être installé + version compatible
Add-Type -AssemblyName System.Windows.Forms

<# '^' : Indique le début de la chaîne.
[a-zA-Z0-9._%+-]+ : Représente un ou plusieurs caractères alphanumériques (lettres minuscules et majuscules, chiffres), ainsi que les caractères spéciaux suivants : ._%+-.
@ : Représente le caractère "@" obligatoire dans une adresse e-mail.
[a-zA-Z0-9.-]+ : Représente un ou plusieurs caractères alphanumériques (lettres minuscules et majuscules, chiffres), ainsi que les caractères spéciaux suivants : .-.
\. : Représente un point "." littéral dans l'adresse e-mail (il doit être échappé avec le caractère "" car "." est un caractère spécial en expression régulière).
[a-zA-Z]{2,} : Représente deux lettres ou plus (lettres minuscules et majuscules) pour le domaine de premier niveau (par exemple : com, net, fr, etc.). Cela assure que le domaine de premier niveau contient au moins deux lettres.
#>

# Vérification de l'adresse e-mail
if (-not ([System.Text.RegularExpressions.Regex]::IsMatch($destinataire, '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'))) {
   
    [System.Windows.Forms.MessageBox]::Show("Veuillez saisir une adresse électronique conforme.", "Erreur", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)

    $dateHeure = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $message = "Erreur lors de la saisie des adresses éléctroniques"
    $log = "$dateHeure - $message"

    Add-Content -Path "\\chemin_accès\log.txt" -Value $log
    return  # Arrêter l'exécution du script

}

# Vérification si la saisie des serveurs est nulle/vide
if ([string]::IsNullOrEmpty($informations)) {

    [System.Windows.Forms.MessageBox]::Show("Veuillez saisir les noms des serveurs impactés.", "Erreur", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)

    $dateHeure = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $message = "Erreur lors de la saisie des serveurs"
    $log = "$dateHeure - $message"

    Add-Content -Path "\\chemin_accès\log.txt" -Value $log
    return  # Quitter le script
}
#============================================================================================================#
#============================================================================================================#

########################################################################
# Transcription du nom d'hôte de l'utilisateur executant le programme
########################################################################


$dom = $env:userdomain
$usr = $env:username
$Fullname = ([adsi]"WinNT://$dom/$usr,user").fullname

if ([string]::IsNullOrEmpty($Fullname)) {

    [System.Windows.Forms.MessageBox]::Show("Utilisateur non trouvé.", "Erreur", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)

    $dateHeure = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $message = "Utilisateur non trouvé"
    $log = "$dateHeure - $message"
    Add-Content -Path "\\chemin_accès\log.txt" -Value $log
    return
}


#============================================================================================================#
#============================================================================================================#

########################################################################
# Mise en forme du Mail d'envoi aux clients 
########################################################################


$base64Signature = @"
# code base 64 image
"@
# Conversion de la chaîne Base64 en image
$bytesSignature = [System.Convert]::FromBase64String($base64Signature)
$imageSignature = [System.Drawing.Image]::FromStream([System.IO.MemoryStream]::new($bytesSignature))

# Encodage de l'image en Base64 pour l'inclure dans l'e-mail
$base64ImageSignature = [System.Convert]::ToBase64String($bytesSignature)

# Corps de l'e-mail avec l'image de signature
$body = @"
<html>
<body>
<p>Bonjour,</p>

<p>Des mises à jour Windows sont en attente d'application sur vos serveurs :</p>

<table style='font-weight: bold;'>
"@

foreach ($info in $informations) {
    $body += "<tr><td>" + $info + "</td></tr>"
}

$body += @"
</table>

<p>Cette intervention impliquerait un ou plusieurs redémarrages du serveur et des indisponibilités de services pendant l'intervention.</p>

<p>Pouvez-vous nous indiquer si cette intervention est réalisable ce samedi $dateSamediSuivant, entre 9h et 17h ?</p>

<p>En vous remerciant par avance pour votre retour, nous restons à votre disposition pour tout complément d’informations.</p>

<p>Cordialement,</p>

<table style='font-weight: bold;'>
<tr>
  <td style='font-size: 16px; font-family: Arial;'>$Fullname</td>
</tr>
</table>

<img src='data:image/png;base64,$base64ImageSignature'>

</body>
</html>
"@

# Utilisateur en copie
$cc = #mail

# Envoi de l'e-mail
Send-MailMessage -SmtpServer "<#smtp srv#>" -To $destinataire -Cc $cc -From ">#mail#>" -Subject "Mises à jour Windows de vos serveurs - Samedi $dateSamediSuivant" -BodyAsHtml -Body $body -Encoding UTF8
